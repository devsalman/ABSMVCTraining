module MAccountController;
import Account, AccountImpl from MAccountModel;
import AccountData, AccountDataImpl from MAccountData;
import ABSHttpRequest from ABS.Framework.Http;

interface AccountController
{
	Pair<String, List<Account>> register(ABSHttpRequest request);
    Pair<String, List<Account>> detail(ABSHttpRequest request);

    // TODO: Rename saving to deposit?
	Pair<String, List<Account>> saving(ABSHttpRequest request);

	Pair<String, List<Account>> withdraw(ABSHttpRequest request);
}

class AccountControllerImpl implements AccountController
{
    AccountData db = null;

    String registerView = "base_account_register";
    String registerSuccessView = "base_account_register_success";
    String registerFailView = "base_account_register_fail";

    String detailView = "base_account_detail";
    String detailFailView = "base_account_detail_fail";

    String savingView = "base_account_saving";
    String savingSuccessView = "base_account_saving_success";
    String savingFailView = "base_account_saving_fail";

    String withdrawView= "base_account_withdraw";
    String withdrawSuccessView = "base_account_withdraw_success";
    String withdrawFailView = "base_account_withdraw_fail";

	Pair<String, List<Account>> register(ABSHttpRequest request)
	{
        String balance = request.getInput("form.balance");
        String interest = request.getInput("form.interest");
        String kind = request.getInput("form.kind");
        String name = request.getInput("form.name");

        String view = registerView;
        List<Account> dataList = Nil;

        // TODO check existing account by its name?
        Account newAccount = new local AccountImpl();
        newAccount.setBalance(balance);
        newAccount.setInterest(interest);
        newAccount.setKind(kind);
        newAccount.setName(name);

        Bool registered = db.save(newAccount);

        if(registered == True)
        {
            view = registerSuccessView;
            dataList = appendright(dataList, newAccount);
        }
        else
        {
            view = registerFailView;
        }

		return Pair(view, dataList);
	}

	Pair<String, List<Account>> detail(ABSHttpRequest request)
	{
        String id = request.getInput("form.id");
        
        String view = detailView;
        List<Account> dataList = Nil;

        Account toFind = db.findByID(id);

        if(toFind == null)
        {
            view = detailFailView;
        }
        else
        {
            dataList = appendright(dataList, toFind);
        }

		return Pair(view, dataList);
    }

	Pair<String, List<Account>> saving(ABSHttpRequest request)
	{
        String id = request.getInput("form.id");
        String amount = request.getInput("form.amount");

        String view = savingView;
        List<Account> dataList = Nil;
        
        Account toUpdate = db.findByID(id);

        if(toUpdate == null)
        {
            view = savingFailView;
        }
        else
        {
            toUpdate.setBalance(amount);
            db.save(toUpdate);
            view = savingSuccessView;
            dataList = appendright(dataList, toUpdate);
        }

		return Pair(view, dataList);
	}

	Pair<String, List<Account>> withdraw(ABSHttpRequest request)
	{
        String id = request.getInput("form.id");
        String amount = request.getInput("form.amount");

        String view = withdrawView;
        List<Account> dataList = Nil;

        Account toUpdate = db.findByID(id);

        if(toUpdate == null)
        {
            view = savingFailView;
        }
        else
        {
            toUpdate.setBalance(amount);
            db.save(toUpdate);
            view = savingSuccessView;
            dataList = appendright(dataList, toUpdate);
        }

		return Pair(view, dataList);
	}

    Unit setDB(AccountData db)
    {
        this.db = db;
    }
}
